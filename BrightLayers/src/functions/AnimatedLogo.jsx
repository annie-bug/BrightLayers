'use client'

import { useEffect, useState, useRef } from 'react'

export const AnimatedLogo = () => {
  const [isIntersecting, setIsIntersecting] = useState(false)
  const ref = useRef(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsIntersecting(true)
        } else {
          setIsIntersecting(false)
        }
      },
      {
        root: null, // Use the viewport as the root
        rootMargin: '0px',
        threshold: 0.5, // Trigger when 50% of the div is in view
      }
    )

    if (ref.current) {
      observer.observe(ref.current)
    }

    return () => {
      if (ref.current) {
        observer.unobserve(ref.current)
      }
    }
  }, [])

  useEffect(() => {
    if (isIntersecting) {
      // Trigger reflow for animation reset
      const element = ref.current.querySelector('.logo-svg')
      element.style.animation = 'none'
      element.offsetHeight // Trigger reflow
      element.style.animation = ''
    }
  }, [isIntersecting])

  return (
    <div ref={ref}>
      <div className={`relative w-[17.625rem] h-[1.375rem] overflow-hidden ${isIntersecting ? 'animate' : ''}`}>
        <svg
          width="282"
          height="22"
          viewBox="0 0 282 22"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="logo-svg"
        >
          <path
            d="M207.29 6.52076C205.619 6.56545 203.929 6.41222 202.277 6.68669C193.879 8.08764 185.494 9.65829 177.093 11.0558C172.128 11.8795 167.148 12.5228 162.172 13.1909C155.74 14.0539 149.306 14.9204 142.867 15.6666C137.654 16.2702 132.425 16.6509 127.209 17.2085C122.224 17.7422 117.252 18.4846 112.262 18.9192C110.518 19.0686 108.708 18.8477 106.982 18.3163C104.462 17.5439 103.692 15.7716 103.677 11.7751C103.665 8.67504 103.398 7.97354 101.333 7.68151C99.2702 7.38942 97.1531 7.21571 95.118 7.61028C82.5521 10.0404 69.9994 12.6225 57.4467 15.201C48.6216 17.0173 39.8345 19.3038 30.9732 20.6286C25.3403 21.4701 19.6011 21.0956 13.9077 20.968C10.0629 20.883 6.21236 20.3233 2.36687 19.8663C1.6297 19.7797 0.331663 20.3424 0.376465 18.3995C0.421959 16.3963 1.76057 16.9203 2.5839 16.955C5.74149 17.1009 8.89615 17.3957 12.0529 17.6833C17.8584 18.2119 23.5827 17.3396 29.2892 16.0602C42.1194 13.1766 54.943 10.2188 67.786 7.46591C76.9068 5.51062 86.0461 3.72845 95.2014 2.11593C97.5333 1.70634 99.9741 1.92454 102.325 2.41442C105.571 3.08945 106.861 5.58488 107.082 10.5892C107.194 13.1515 107.295 13.5528 108.953 13.5403C112.643 13.5125 116.341 13.3605 120.016 12.9717C126.843 12.2506 133.659 11.3526 140.475 10.4758C150.893 9.13781 161.322 7.91999 171.72 6.34511C181.351 4.88639 190.945 2.96451 200.567 1.38205C203.083 0.967527 205.638 1.00195 208.178 0.941136C208.93 0.921008 209.73 1.1193 210.446 1.50765C212.353 2.53382 212.982 5.10363 212.042 7.77914C211.759 8.5804 211.398 9.30934 211.084 10.0512C211.292 10.3256 211.417 10.6021 211.499 10.5751C218.306 8.4833 225.265 8.74014 232.167 8.14456C240.464 7.42665 248.754 6.64158 257.051 5.90597C264.21 5.26809 271.367 5.70741 278.524 6.79873C278.832 6.84365 279.141 6.86373 279.447 6.94412C280.333 7.17555 281.177 7.61008 281.173 9.29324C281.17 10.9764 280.358 11.3914 279.441 11.4372C278.826 11.4678 278.207 11.4631 277.592 11.3839C269.191 10.2939 260.805 10.2808 252.42 11.0684C242.439 12.0085 232.452 12.8779 222.46 13.6092C218.678 13.8875 214.965 14.5998 211.279 15.772C209.94 16.1975 208.535 16.4619 207.169 16.3638C205.073 16.2143 204.238 13.4055 205.454 10.8147C206.062 9.51935 206.834 8.41091 207.53 7.21593C207.45 6.98067 207.37 6.74895 207.29 6.51368L207.29 6.52076Z"
            fill="#FF8412"
          />
        </svg>
      </div>
      <style jsx>{`
        @keyframes reveal {
          0% {
            clip-path: inset(0 100% 0 0);
          }
          100% {
            clip-path: inset(0 0 0 0);
          }
        }
        .animate .logo-svg {
          animation: reveal 2s linear forwards;
        }
      `}</style>
    </div>
  )
}
